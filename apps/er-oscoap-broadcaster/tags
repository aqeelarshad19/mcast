!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDTO2_temp	sha384-512.c	/^static uint32_t ADDTO2_temp;$/;"	v	file:
ADDTO4_temp	sha384-512.c	/^static uint32_t ADDTO4_temp, ADDTO4_temp2;$/;"	v	file:
ADDTO4_temp2	sha384-512.c	/^static uint32_t ADDTO4_temp, ADDTO4_temp2;$/;"	v	file:
Ch_temp1	sha384-512.c	/^static uint32_t Ch_temp1[2], Ch_temp2[2], Ch_temp3[2];$/;"	v	file:
Ch_temp2	sha384-512.c	/^static uint32_t Ch_temp1[2], Ch_temp2[2], Ch_temp3[2];$/;"	v	file:
Ch_temp3	sha384-512.c	/^static uint32_t Ch_temp1[2], Ch_temp2[2], Ch_temp3[2];$/;"	v	file:
Computed	sha.h	/^    int Computed;                   \/* Is the hash computed? *\/$/;"	m	struct:SHA1Context
Computed	sha.h	/^    int Computed;                   \/* Is the hash computed? *\/$/;"	m	struct:SHA256Context
Computed	sha.h	/^    int Computed;                   \/* Is the hash computed?*\/$/;"	m	struct:SHA512Context
Computed	sha.h	/^    int Computed;               \/* Is the MAC computed? *\/$/;"	m	struct:HMACContext
Computed	sha.h	/^    int Computed;               \/* Is the key material computed? *\/$/;"	m	struct:HKDFContext
Corrupted	sha.h	/^    int Corrupted;                  \/* Cumulative corruption code *\/$/;"	m	struct:SHA1Context
Corrupted	sha.h	/^    int Corrupted;                  \/* Cumulative corruption code *\/$/;"	m	struct:SHA256Context
Corrupted	sha.h	/^    int Corrupted;                  \/* Cumulative corruption code *\/$/;"	m	struct:SHA512Context
Corrupted	sha.h	/^    int Corrupted;              \/* Cumulative corruption code *\/$/;"	m	struct:HKDFContext
Corrupted	sha.h	/^    int Corrupted;              \/* Cumulative corruption code *\/$/;"	m	struct:HMACContext
DEPS	Makefile	/^DEPS = Makefile$/;"	m
HASHCOUNT	shatest.c	212;"	d	file:
HKDFContext	sha.h	/^typedef struct HKDFContext {$/;"	s
HKDFContext	sha.h	/^} HKDFContext;$/;"	t	typeref:struct:HKDFContext
HKDFTESTCOUNT	shatest.c	215;"	d	file:
HMACContext	sha.h	/^typedef struct HMACContext {$/;"	s
HMACContext	sha.h	/^} HMACContext;$/;"	t	typeref:struct:HMACContext
HMACTESTCOUNT	shatest.c	214;"	d	file:
Intermediate_Hash	sha.h	/^    uint32_t Intermediate_Hash[SHA1HashSize\/4]; \/* Message Digest *\/$/;"	m	struct:SHA1Context
Intermediate_Hash	sha.h	/^    uint32_t Intermediate_Hash[SHA256HashSize\/4]; \/* Message Digest *\/$/;"	m	struct:SHA256Context
Intermediate_Hash	sha.h	/^    uint32_t Intermediate_Hash[SHA512HashSize\/4]; \/* Message Digest  *\/$/;"	m	struct:SHA512Context
LINK	Makefile	/^LINK    = @echo "* Linking $@"; $(CC) $(CFLAGS) $(LDFLAGS)$/;"	m
Length	sha.h	/^    uint32_t Length[4];                 \/* Message length in bits *\/$/;"	m	struct:SHA512Context
Length_High	sha.h	/^    uint32_t Length_High;               \/* Message length in bits *\/$/;"	m	struct:SHA1Context
Length_High	sha.h	/^    uint32_t Length_High;               \/* Message length in bits *\/$/;"	m	struct:SHA256Context
Length_Low	sha.h	/^    uint32_t Length_Low;                \/* Message length in bits *\/$/;"	m	struct:SHA1Context
Length_Low	sha.h	/^    uint32_t Length_Low;                \/* Message length in bits *\/$/;"	m	struct:SHA256Context
Maj_temp1	sha384-512.c	/^static uint32_t Maj_temp1[2], Maj_temp2[2],$/;"	v	file:
Maj_temp2	sha384-512.c	/^static uint32_t Maj_temp1[2], Maj_temp2[2],$/;"	v	file:
Maj_temp3	sha384-512.c	/^  Maj_temp3[2], Maj_temp4[2];$/;"	v	file:
Maj_temp4	sha384-512.c	/^  Maj_temp3[2], Maj_temp4[2];$/;"	v	file:
Message_Block	sha.h	/^    uint8_t Message_Block[SHA1_Message_Block_Size];$/;"	m	struct:SHA1Context
Message_Block	sha.h	/^    uint8_t Message_Block[SHA256_Message_Block_Size];$/;"	m	struct:SHA256Context
Message_Block	sha.h	/^    uint8_t Message_Block[SHA512_Message_Block_Size];$/;"	m	struct:SHA512Context
Message_Block_Index	sha.h	/^    int_least16_t Message_Block_Index;  \/* Message_Block array index *\/$/;"	m	struct:SHA1Context
Message_Block_Index	sha.h	/^    int_least16_t Message_Block_Index;  \/* Message_Block array index *\/$/;"	m	struct:SHA256Context
Message_Block_Index	sha.h	/^    int_least16_t Message_Block_Index;  \/* Message_Block array index *\/$/;"	m	struct:SHA512Context
OBJS	Makefile	/^OBJS := $(shell ls *.c | sed 's\/\\.c\/.o\/' | sed 's\/ \/\\n\/g' | sort | uniq | tr '\\n' ' ')$/;"	m
PRINTBASE64	shatest.c	221;"	d	file:
PRINTFAIL	shatest.c	224;"	d	file:
PRINTHEX	shatest.c	220;"	d	file:
PRINTNONE	shatest.c	217;"	d	file:
PRINTPASSFAIL	shatest.c	223;"	d	file:
PRINTRAW	shatest.c	219;"	d	file:
PRINTTEXT	shatest.c	218;"	d	file:
RANDOMCOUNT	shatest.c	213;"	d	file:
ROTR_temp1	sha384-512.c	/^static uint32_t ROTR_temp1[2], ROTR_temp2[2];$/;"	v	file:
ROTR_temp2	sha384-512.c	/^static uint32_t ROTR_temp1[2], ROTR_temp2[2];$/;"	v	file:
SHA1	sha.h	/^    SHA1, SHA224, SHA256, SHA384, SHA512$/;"	e	enum:SHAversion
SHA1AddLength	sha1.c	53;"	d	file:
SHA1Context	sha.h	/^typedef struct SHA1Context {$/;"	s
SHA1Context	sha.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1FinalBits	sha1.c	/^int SHA1FinalBits(SHA1Context *context, uint8_t message_bits,$/;"	f
SHA1Finalize	sha1.c	/^static void SHA1Finalize(SHA1Context *context, uint8_t Pad_Byte)$/;"	f	file:
SHA1HashSize	sha.h	/^    SHA1HashSize = 20, SHA224HashSize = 28, SHA256HashSize = 32,$/;"	e	enum:__anon2
SHA1HashSizeBits	sha.h	/^    SHA1HashSizeBits = 160, SHA224HashSizeBits = 224,$/;"	e	enum:__anon2
SHA1Input	sha1.c	/^int SHA1Input(SHA1Context *context,$/;"	f
SHA1PadMessage	sha1.c	/^static void SHA1PadMessage(SHA1Context *context, uint8_t Pad_Byte)$/;"	f	file:
SHA1ProcessMessageBlock	sha1.c	/^static void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f	file:
SHA1Reset	sha1.c	/^int SHA1Reset(SHA1Context *context)$/;"	f
SHA1Result	sha1.c	/^int SHA1Result(SHA1Context *context,$/;"	f
SHA1_Message_Block_Size	sha.h	/^    SHA1_Message_Block_Size = 64, SHA224_Message_Block_Size = 64,$/;"	e	enum:__anon2
SHA1_ROTL	sha1.c	45;"	d	file:
SHA1_SEED	shatest.c	193;"	d	file:
SHA224	sha.h	/^    SHA1, SHA224, SHA256, SHA384, SHA512$/;"	e	enum:SHAversion
SHA224Context	sha.h	/^typedef struct SHA256Context SHA224Context;$/;"	t	typeref:struct:SHA256Context
SHA224FinalBits	sha224-256.c	/^int SHA224FinalBits(SHA224Context *context,$/;"	f
SHA224HashSize	sha.h	/^    SHA1HashSize = 20, SHA224HashSize = 28, SHA256HashSize = 32,$/;"	e	enum:__anon2
SHA224HashSizeBits	sha.h	/^    SHA1HashSizeBits = 160, SHA224HashSizeBits = 224,$/;"	e	enum:__anon2
SHA224Input	sha224-256.c	/^int SHA224Input(SHA224Context *context, const uint8_t *message_array,$/;"	f
SHA224Reset	sha224-256.c	/^int SHA224Reset(SHA224Context *context)$/;"	f
SHA224Result	sha224-256.c	/^int SHA224Result(SHA224Context *context,$/;"	f
SHA224_256AddLength	sha224-256.c	68;"	d	file:
SHA224_256Finalize	sha224-256.c	/^static void SHA224_256Finalize(SHA256Context *context,$/;"	f	file:
SHA224_256PadMessage	sha224-256.c	/^static void SHA224_256PadMessage(SHA256Context *context,$/;"	f	file:
SHA224_256ProcessMessageBlock	sha224-256.c	/^static void SHA224_256ProcessMessageBlock(SHA256Context *context)$/;"	f	file:
SHA224_256Reset	sha224-256.c	/^static int SHA224_256Reset(SHA256Context *context, uint32_t *H0)$/;"	f	file:
SHA224_256ResultN	sha224-256.c	/^static int SHA224_256ResultN(SHA256Context *context,$/;"	f	file:
SHA224_H0	sha224-256.c	/^static uint32_t SHA224_H0[SHA256HashSize\/4] = {$/;"	v	file:
SHA224_Message_Block_Size	sha.h	/^    SHA1_Message_Block_Size = 64, SHA224_Message_Block_Size = 64,$/;"	e	enum:__anon2
SHA224_SEED	shatest.c	195;"	d	file:
SHA256	sha.h	/^    SHA1, SHA224, SHA256, SHA384, SHA512$/;"	e	enum:SHAversion
SHA256Context	sha.h	/^typedef struct SHA256Context {$/;"	s
SHA256Context	sha.h	/^} SHA256Context;$/;"	t	typeref:struct:SHA256Context
SHA256FinalBits	sha224-256.c	/^int SHA256FinalBits(SHA256Context *context,$/;"	f
SHA256HashSize	sha.h	/^    SHA1HashSize = 20, SHA224HashSize = 28, SHA256HashSize = 32,$/;"	e	enum:__anon2
SHA256HashSizeBits	sha.h	/^    SHA256HashSizeBits = 256, SHA384HashSizeBits = 384,$/;"	e	enum:__anon2
SHA256Input	sha224-256.c	/^int SHA256Input(SHA256Context *context, const uint8_t *message_array,$/;"	f
SHA256Reset	sha224-256.c	/^int SHA256Reset(SHA256Context *context)$/;"	f
SHA256Result	sha224-256.c	/^int SHA256Result(SHA256Context *context,$/;"	f
SHA256_H0	sha224-256.c	/^static uint32_t SHA256_H0[SHA256HashSize\/4] = {$/;"	v	file:
SHA256_Message_Block_Size	sha.h	/^    SHA256_Message_Block_Size = 64, SHA384_Message_Block_Size = 128,$/;"	e	enum:__anon2
SHA256_ROTL	sha224-256.c	48;"	d	file:
SHA256_ROTR	sha224-256.c	50;"	d	file:
SHA256_SEED	shatest.c	198;"	d	file:
SHA256_SHR	sha224-256.c	47;"	d	file:
SHA256_SIGMA0	sha224-256.c	54;"	d	file:
SHA256_SIGMA1	sha224-256.c	56;"	d	file:
SHA256_sigma0	sha224-256.c	58;"	d	file:
SHA256_sigma1	sha224-256.c	60;"	d	file:
SHA384	sha.h	/^    SHA1, SHA224, SHA256, SHA384, SHA512$/;"	e	enum:SHAversion
SHA384Context	sha.h	/^typedef struct SHA512Context SHA384Context;$/;"	t	typeref:struct:SHA512Context
SHA384FinalBits	sha384-512.c	/^int SHA384FinalBits(SHA384Context *context,$/;"	f
SHA384HashSize	sha.h	/^    SHA384HashSize = 48, SHA512HashSize = 64,$/;"	e	enum:__anon2
SHA384HashSizeBits	sha.h	/^    SHA256HashSizeBits = 256, SHA384HashSizeBits = 384,$/;"	e	enum:__anon2
SHA384Input	sha384-512.c	/^int SHA384Input(SHA384Context *context,$/;"	f
SHA384Reset	sha384-512.c	/^int SHA384Reset(SHA384Context *context)$/;"	f
SHA384Result	sha384-512.c	/^int SHA384Result(SHA384Context *context,$/;"	f
SHA384_512AddLength	sha384-512.c	242;"	d	file:
SHA384_512AddLength	sha384-512.c	302;"	d	file:
SHA384_512Finalize	sha384-512.c	/^static void SHA384_512Finalize(SHA512Context *context,$/;"	f	file:
SHA384_512PadMessage	sha384-512.c	/^static void SHA384_512PadMessage(SHA512Context *context,$/;"	f	file:
SHA384_512ProcessMessageBlock	sha384-512.c	/^static void SHA384_512ProcessMessageBlock(SHA512Context *context)$/;"	f	file:
SHA384_512Reset	sha384-512.c	/^static int SHA384_512Reset(SHA512Context *context,$/;"	f	file:
SHA384_512ResultN	sha384-512.c	/^static int SHA384_512ResultN(SHA512Context *context,$/;"	f	file:
SHA384_H0	sha384-512.c	/^static uint32_t SHA384_H0[SHA512HashSize\/4] = {$/;"	v	file:
SHA384_H0	sha384-512.c	/^static uint64_t SHA384_H0[ ] = {$/;"	v	file:
SHA384_Message_Block_Size	sha.h	/^    SHA256_Message_Block_Size = 64, SHA384_Message_Block_Size = 128,$/;"	e	enum:__anon2
SHA384_SEED	shatest.c	201;"	d	file:
SHA512	sha.h	/^    SHA1, SHA224, SHA256, SHA384, SHA512$/;"	e	enum:SHAversion
SHA512Context	sha.h	/^typedef struct SHA512Context {$/;"	s
SHA512Context	sha.h	/^} SHA512Context;$/;"	t	typeref:struct:SHA512Context
SHA512FinalBits	sha384-512.c	/^int SHA512FinalBits(SHA512Context *context,$/;"	f
SHA512HashSize	sha.h	/^    SHA384HashSize = 48, SHA512HashSize = 64,$/;"	e	enum:__anon2
SHA512HashSizeBits	sha.h	/^    SHA512HashSizeBits = 512, USHAMaxHashSizeBits = SHA512HashSizeBits$/;"	e	enum:__anon2
SHA512Input	sha384-512.c	/^int SHA512Input(SHA512Context *context,$/;"	f
SHA512Reset	sha384-512.c	/^int SHA512Reset(SHA512Context *context)$/;"	f
SHA512Result	sha384-512.c	/^int SHA512Result(SHA512Context *context,$/;"	f
SHA512_ADD	sha384-512.c	109;"	d	file:
SHA512_ADDTO2	sha384-512.c	130;"	d	file:
SHA512_ADDTO4	sha384-512.c	117;"	d	file:
SHA512_AND	sha384-512.c	96;"	d	file:
SHA512_H0	sha384-512.c	/^static uint32_t SHA512_H0[SHA512HashSize\/4] = {$/;"	v	file:
SHA512_H0	sha384-512.c	/^static uint64_t SHA512_H0[ ] = {$/;"	v	file:
SHA512_Message_Block_Size	sha.h	/^    SHA512_Message_Block_Size = 128,$/;"	e	enum:__anon2
SHA512_OR	sha384-512.c	82;"	d	file:
SHA512_ROTR	sha384-512.c	139;"	d	file:
SHA512_ROTR	sha384-512.c	280;"	d	file:
SHA512_SEED	shatest.c	205;"	d	file:
SHA512_SHL	sha384-512.c	68;"	d	file:
SHA512_SHR	sha384-512.c	279;"	d	file:
SHA512_SHR	sha384-512.c	58;"	d	file:
SHA512_SIGMA0	sha384-512.c	151;"	d	file:
SHA512_SIGMA0	sha384-512.c	288;"	d	file:
SHA512_SIGMA1	sha384-512.c	163;"	d	file:
SHA512_SIGMA1	sha384-512.c	290;"	d	file:
SHA512_TILDA	sha384-512.c	103;"	d	file:
SHA512_XOR	sha384-512.c	89;"	d	file:
SHA512_sigma0	sha384-512.c	175;"	d	file:
SHA512_sigma0	sha384-512.c	292;"	d	file:
SHA512_sigma1	sha384-512.c	187;"	d	file:
SHA512_sigma1	sha384-512.c	294;"	d	file:
SHA_Ch	sha-private.h	14;"	d
SHA_Ch	sha-private.h	21;"	d
SHA_Ch	sha384-512.c	200;"	d	file:
SHA_Ch	sha384-512.c	224;"	d	file:
SHA_Maj	sha-private.h	15;"	d
SHA_Maj	sha-private.h	22;"	d
SHA_Maj	sha384-512.c	211;"	d	file:
SHA_Maj	sha384-512.c	232;"	d	file:
SHA_Parity	sha-private.h	26;"	d
SHAversion	sha.h	/^typedef enum SHAversion {$/;"	g
SHAversion	sha.h	/^} SHAversion;$/;"	t	typeref:enum:SHAversion
SIGMA0_temp1	sha384-512.c	/^static uint32_t SIGMA0_temp1[2], SIGMA0_temp2[2],$/;"	v	file:
SIGMA0_temp2	sha384-512.c	/^static uint32_t SIGMA0_temp1[2], SIGMA0_temp2[2],$/;"	v	file:
SIGMA0_temp3	sha384-512.c	/^  SIGMA0_temp3[2], SIGMA0_temp4[2];$/;"	v	file:
SIGMA0_temp4	sha384-512.c	/^  SIGMA0_temp3[2], SIGMA0_temp4[2];$/;"	v	file:
SIGMA1_temp1	sha384-512.c	/^static uint32_t SIGMA1_temp1[2], SIGMA1_temp2[2],$/;"	v	file:
SIGMA1_temp2	sha384-512.c	/^static uint32_t SIGMA1_temp1[2], SIGMA1_temp2[2],$/;"	v	file:
SIGMA1_temp3	sha384-512.c	/^  SIGMA1_temp3[2], SIGMA1_temp4[2];$/;"	v	file:
SIGMA1_temp4	sha384-512.c	/^  SIGMA1_temp3[2], SIGMA1_temp4[2];$/;"	v	file:
TEST1	shatest.c	54;"	d	file:
TEST10_1	shatest.c	77;"	d	file:
TEST10_224	shatest.c	99;"	d	file:
TEST10_256	shatest.c	121;"	d	file:
TEST10_384	shatest.c	147;"	d	file:
TEST10_512	shatest.c	177;"	d	file:
TEST2_1	shatest.c	55;"	d	file:
TEST2_2	shatest.c	61;"	d	file:
TEST2_2a	shatest.c	57;"	d	file:
TEST2_2b	shatest.c	59;"	d	file:
TEST3	shatest.c	62;"	d	file:
TEST4	shatest.c	66;"	d	file:
TEST4a	shatest.c	63;"	d	file:
TEST4b	shatest.c	64;"	d	file:
TEST7_1	shatest.c	67;"	d	file:
TEST7_224	shatest.c	89;"	d	file:
TEST7_256	shatest.c	111;"	d	file:
TEST7_384	shatest.c	133;"	d	file:
TEST7_512	shatest.c	163;"	d	file:
TEST8_1	shatest.c	69;"	d	file:
TEST8_224	shatest.c	91;"	d	file:
TEST8_256	shatest.c	113;"	d	file:
TEST8_384	shatest.c	135;"	d	file:
TEST8_512	shatest.c	165;"	d	file:
TEST9_1	shatest.c	71;"	d	file:
TEST9_224	shatest.c	93;"	d	file:
TEST9_256	shatest.c	115;"	d	file:
TEST9_384	shatest.c	137;"	d	file:
TEST9_512	shatest.c	167;"	d	file:
TESTCOUNT	shatest.c	211;"	d	file:
USHABlockSize	usha.c	/^int USHABlockSize(enum SHAversion whichSha)$/;"	f
USHAContext	sha.h	/^typedef struct USHAContext {$/;"	s
USHAContext	sha.h	/^} USHAContext;$/;"	t	typeref:struct:USHAContext
USHAFinalBits	usha.c	/^int USHAFinalBits(USHAContext *context,$/;"	f
USHAHashName	usha.c	/^const char *USHAHashName(enum SHAversion whichSha)$/;"	f
USHAHashSize	usha.c	/^int USHAHashSize(enum SHAversion whichSha)$/;"	f
USHAHashSizeBits	usha.c	/^int USHAHashSizeBits(enum SHAversion whichSha)$/;"	f
USHAInput	usha.c	/^int USHAInput(USHAContext *context,$/;"	f
USHAMaxHashSize	sha.h	/^    USHAMaxHashSize = SHA512HashSize,$/;"	e	enum:__anon2
USHAMaxHashSizeBits	sha.h	/^    SHA512HashSizeBits = 512, USHAMaxHashSizeBits = SHA512HashSizeBits$/;"	e	enum:__anon2
USHAReset	usha.c	/^int USHAReset(USHAContext *context, enum SHAversion whichSha)$/;"	f
USHAResult	usha.c	/^int USHAResult(USHAContext *context,$/;"	f
USHA_Max_Message_Block_Size	sha.h	/^    USHA_Max_Message_Block_Size = SHA512_Message_Block_Size,$/;"	e	enum:__anon2
_SHA_H_	sha.h	40;"	d
_SHA_PRIVATE__H	sha-private.h	4;"	d
_SHA_enum_	sha.h	87;"	d
addTemp	sha1.c	/^static uint32_t addTemp;$/;"	v	file:
addTemp	sha224-256.c	/^static uint32_t addTemp;$/;"	v	file:
addTemp	sha384-512.c	/^static uint32_t addTemp[4] = { 0, 0, 0, 0 };$/;"	v	file:
addTemp	sha384-512.c	/^static uint64_t addTemp;$/;"	v	file:
blockSize	sha.h	/^    int blockSize;              \/* block size of SHA being used *\/$/;"	m	struct:HMACContext
checkmatch	shatest.c	/^int checkmatch(const unsigned char *hashvalue,$/;"	f
ctx	sha.h	/^    } ctx;$/;"	m	struct:USHAContext	typeref:union:USHAContext::__anon3
dataarray	shatest.c	/^    const char *dataarray[5];$/;"	m	struct:hmachash	file:
datalength	shatest.c	/^    int datalength[5];$/;"	m	struct:hmachash	file:
extrabits	shatest.c	/^        int extrabits;$/;"	m	struct:hash::__anon4	file:
findhash	shatest.c	/^int findhash(const char *argv0, const char *opt)$/;"	f
hash	shatest.c	/^int hash(int testno, int loopno, int hashno,$/;"	f
hash	shatest.c	/^struct hash {$/;"	s	file:
hashHkdf	shatest.c	/^int hashHkdf(int testno, int loopno, int hashno,$/;"	f
hashSize	sha.h	/^    int hashSize;               \/* hash size of SHA being used *\/$/;"	m	struct:HKDFContext
hashSize	sha.h	/^    int hashSize;               \/* hash size of SHA being used *\/$/;"	m	struct:HMACContext
hashes	shatest.c	/^} hashes[HASHCOUNT] = {$/;"	v	typeref:struct:hash
hashfile	shatest.c	/^int hashfile(int hashno, const char *hashfilename, int bits,$/;"	f
hashsize	shatest.c	/^    int hashsize;$/;"	m	struct:hash	file:
hexdigits	shatest.c	/^static const char hexdigits[ ] = "0123456789ABCDEF";$/;"	v	file:
hkdf	hkdf.c	/^int hkdf(SHAversion whichSha,$/;"	f
hkdfExpand	hkdf.c	/^int hkdfExpand(SHAversion whichSha, const uint8_t prk[ ], int prk_len,$/;"	f
hkdfExtract	hkdf.c	/^int hkdfExtract(SHAversion whichSha,$/;"	f
hkdfFinalBits	hkdf.c	/^int hkdfFinalBits(HKDFContext *context, uint8_t ikm_bits,$/;"	f
hkdfInput	hkdf.c	/^int hkdfInput(HKDFContext *context, const unsigned char *ikm,$/;"	f
hkdfReset	hkdf.c	/^int hkdfReset(HKDFContext *context, enum SHAversion whichSha,$/;"	f
hkdfResult	hkdf.c	/^int hkdfResult(HKDFContext *context,$/;"	f
hkdfhash	shatest.c	/^struct hkdfhash {$/;"	s	file:
hkdfhashes	shatest.c	/^} hkdfhashes[HKDFTESTCOUNT] = {$/;"	v	typeref:struct:hkdfhash
hmac	hmac.c	/^int hmac(SHAversion whichSha,$/;"	f
hmacContext	sha.h	/^    HMACContext hmacContext;$/;"	m	struct:HKDFContext
hmacFinalBits	hmac.c	/^int hmacFinalBits(HMACContext *context,$/;"	f
hmacInput	hmac.c	/^int hmacInput(HMACContext *context, const unsigned char *text,$/;"	f
hmacReset	hmac.c	/^int hmacReset(HMACContext *context, enum SHAversion whichSha,$/;"	f
hmacResult	hmac.c	/^int hmacResult(HMACContext *context, uint8_t *digest)$/;"	f
hmachash	shatest.c	/^struct hmachash {$/;"	s	file:
hmachashes	shatest.c	/^} hmachashes[HMACTESTCOUNT] = {$/;"	v	typeref:struct:hmachash
ikmarray	shatest.c	/^    const char *ikmarray;$/;"	m	struct:hkdfhash	file:
ikmlength	shatest.c	/^    int ikmlength;$/;"	m	struct:hkdfhash	file:
infoarray	shatest.c	/^    const char *infoarray;$/;"	m	struct:hkdfhash	file:
infolength	shatest.c	/^    int infolength;$/;"	m	struct:hkdfhash	file:
k_opad	sha.h	/^    unsigned char k_opad[USHA_Max_Message_Block_Size];$/;"	m	struct:HMACContext
keyarray	shatest.c	/^    const char *keyarray[5];$/;"	m	struct:hmachash	file:
keylength	shatest.c	/^    int keylength[5];$/;"	m	struct:hmachash	file:
length	shatest.c	/^        int length;$/;"	m	struct:hash::__anon4	file:
length	shatest.c	226;"	d	file:
main	shatest.c	/^int main(int argc, char **argv)$/;"	f
name	shatest.c	/^    const char *name;$/;"	m	struct:hash	file:
numberExtrabits	shatest.c	/^        int numberExtrabits;$/;"	m	struct:hash::__anon4	file:
okmarray	shatest.c	/^    const char *okmarray;$/;"	m	struct:hkdfhash	file:
okmlength	shatest.c	/^    int okmlength;$/;"	m	struct:hkdfhash	file:
printResult	shatest.c	/^void printResult(uint8_t *Message_Digest, int hashsize,$/;"	f
printstr	shatest.c	/^void printstr(const char *str, int len)$/;"	f
printxstr	shatest.c	/^void printxstr(const char *str, int len)$/;"	f
prk	sha.h	/^    unsigned char prk[USHAMaxHashSize];$/;"	m	struct:HKDFContext
prkarray	shatest.c	/^    const char *prkarray;$/;"	m	struct:hkdfhash	file:
prklength	shatest.c	/^    int prklength;$/;"	m	struct:hkdfhash	file:
randomresults	shatest.c	/^    const char *randomresults[RANDOMCOUNT];$/;"	m	struct:hash	file:
randomtest	shatest.c	/^    const char *randomtest;$/;"	m	struct:hash	file:
randomtest	shatest.c	/^void randomtest(int hashno, const char *seed, int hashsize,$/;"	f
repeatcount	shatest.c	/^        long repeatcount;$/;"	m	struct:hash::__anon4	file:
resultarray	shatest.c	/^        const char *resultarray;$/;"	m	struct:hash::__anon4	file:
resultarray	shatest.c	/^    const char *resultarray[5];$/;"	m	struct:hmachash	file:
resultlength	shatest.c	/^    int resultlength[5];$/;"	m	struct:hmachash	file:
saltarray	shatest.c	/^    const char *saltarray;$/;"	m	struct:hkdfhash	file:
saltlength	shatest.c	/^    int saltlength;$/;"	m	struct:hkdfhash	file:
scasecmp	shatest.c	/^int scasecmp(const char *s1, const char *s2)$/;"	f
sha1Context	sha.h	/^      SHA1Context sha1Context;$/;"	m	union:USHAContext::__anon3
sha224Context	sha.h	/^      SHA224Context sha224Context; SHA256Context sha256Context;$/;"	m	union:USHAContext::__anon3
sha256Context	sha.h	/^      SHA224Context sha224Context; SHA256Context sha256Context;$/;"	m	union:USHAContext::__anon3
sha384Context	sha.h	/^      SHA384Context sha384Context; SHA512Context sha512Context;$/;"	m	union:USHAContext::__anon3
sha512Context	sha.h	/^      SHA384Context sha384Context; SHA512Context sha512Context;$/;"	m	union:USHAContext::__anon3
shaBadParam	sha.h	/^    shaBadParam         \/* passed a bad parameter *\/$/;"	e	enum:__anon1
shaContext	sha.h	/^    USHAContext shaContext;     \/* SHA context *\/$/;"	m	struct:HMACContext
shaInputTooLong	sha.h	/^    shaInputTooLong,    \/* input data too long *\/$/;"	e	enum:__anon1
shaNull	sha.h	/^    shaNull,            \/* Null pointer parameter *\/$/;"	e	enum:__anon1
shaStateError	sha.h	/^    shaStateError,      \/* called Input after FinalBits or Result *\/$/;"	e	enum:__anon1
shaSuccess	sha.h	/^    shaSuccess = 0,$/;"	e	enum:__anon1
sigma0_temp1	sha384-512.c	/^static uint32_t sigma0_temp1[2], sigma0_temp2[2],$/;"	v	file:
sigma0_temp2	sha384-512.c	/^static uint32_t sigma0_temp1[2], sigma0_temp2[2],$/;"	v	file:
sigma0_temp3	sha384-512.c	/^  sigma0_temp3[2], sigma0_temp4[2];$/;"	v	file:
sigma0_temp4	sha384-512.c	/^  sigma0_temp3[2], sigma0_temp4[2];$/;"	v	file:
sigma1_temp1	sha384-512.c	/^static uint32_t sigma1_temp1[2], sigma1_temp2[2],$/;"	v	file:
sigma1_temp2	sha384-512.c	/^static uint32_t sigma1_temp1[2], sigma1_temp2[2],$/;"	v	file:
sigma1_temp3	sha384-512.c	/^  sigma1_temp3[2], sigma1_temp4[2];$/;"	v	file:
sigma1_temp4	sha384-512.c	/^  sigma1_temp3[2], sigma1_temp4[2];$/;"	v	file:
testErrors	shatest.c	/^void testErrors(int hashnolow, int hashnohigh, int printResults,$/;"	f
testarray	shatest.c	/^        const char *testarray;$/;"	m	struct:hash::__anon4	file:
tests	shatest.c	/^    } tests[TESTCOUNT];$/;"	m	struct:hash	typeref:struct:hash::__anon4	file:
unhexStr	shatest.c	/^int unhexStr(char *hexstr)$/;"	f
usage	shatest.c	/^void usage(const char *argv0)$/;"	f
whichSha	sha.h	/^    int whichSha;               \/* which SHA is being used *\/$/;"	m	struct:HKDFContext
whichSha	sha.h	/^    int whichSha;               \/* which SHA is being used *\/$/;"	m	struct:HMACContext
whichSha	sha.h	/^    int whichSha;               \/* which SHA is being used *\/$/;"	m	struct:USHAContext
whichSha	shatest.c	/^    SHAversion whichSha;$/;"	m	struct:hash	file:
whichSha	shatest.c	/^    SHAversion whichSha;$/;"	m	struct:hkdfhash	file:
